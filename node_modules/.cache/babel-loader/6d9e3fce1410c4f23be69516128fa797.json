{"ast":null,"code":"var _jsxFileName = \"/Users/careybest/development/coding-challenges/foreflight2/src/components/Weather/Weather.jsx\";\nimport React from 'react';\nimport './Weather.scss';\nimport useAxios from 'axios-hooks';\n\nconst Weather = () => {\n  const [{\n    data,\n    loading,\n    error\n  }] = useAxios('http://localhost:3000/weather/khou.json');\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 23\n    }\n  }, \"Loading weather information..\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 21\n    }\n  }, \"Error!\");\n  const conditions = data.report.conditions;\n  console.log('WEATHER', conditions);\n  const bearing = 230;\n  const bearingArr = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];\n  const direction = bearingArr.map((item, index) => {\n    let degreeMin = index * 22.5;\n    let degreeMax = degreeMin + 22.5;\n\n    if (bearing > degreeMin && bearing < degreeMax) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      }, bearing, \" \", item);\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"weather\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"card-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, \"Weather Conditions\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 15\n    }\n  }, \"Temperature:\"), /*#__PURE__*/React.createElement(\"span\", {\n    \"data-test\": \"temperature\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  }, conditions.tempC * 9 / 5 + 32, \"\\u2109\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }, \"Relative Humidity:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, conditions.relativeHumidity, \"%\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  }, \"Cloud Coverage\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, conditions.cloudLayers.map(item => item.coverage.toUpperCase()))), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, \"Visibility:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }, conditions.visibility.distanceSm, \" miles\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, \"Wind Speed:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, (conditions.wind.speedKts * 1.151).toFixed(1), \" mph\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, \"Wind Direction:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, direction))))));\n};\n\nexport default Weather;","map":{"version":3,"sources":["/Users/careybest/development/coding-challenges/foreflight2/src/components/Weather/Weather.jsx"],"names":["React","useAxios","Weather","data","loading","error","conditions","report","console","log","bearing","bearingArr","direction","map","item","index","degreeMin","degreeMax","tempC","relativeHumidity","cloudLayers","coverage","toUpperCase","visibility","distanceSm","wind","speedKts","toFixed"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Weather.scss';\nimport useAxios from 'axios-hooks';\n\nconst Weather = () => {\n  const [{ data, loading, error }] = useAxios(\n    'http://localhost:3000/weather/khou.json'\n  );\n\n  if (loading) return <p className='loading'>Loading weather information..</p>\n  if (error) return <p className='error'>Error!</p>\n\n  const conditions = data.report.conditions;\n  console.log('WEATHER', conditions);\n\n  const bearing = 230;\n  const bearingArr = [\n    'N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'\n  ];\n\n  const direction = bearingArr.map((item, index) => {\n    let degreeMin = index * 22.5;\n    let degreeMax = degreeMin + 22.5;\n    if (bearing > degreeMin && bearing < degreeMax) {\n      return (\n        <span key={index}>{bearing} {item}</span>\n      )\n    }\n  });\n\n  return (\n    <section className='weather'>\n      <section className='card'>\n        <header className='card-header'>\n          <h4>Weather Conditions</h4>\n        </header>\n        <div className='card-body'>\n          <ul>\n            <li>\n              {/* Temp (F) */}\n              <strong className='label'>Temperature:</strong>\n              <span data-test='temperature'>{(conditions.tempC * 9 / 5) + 32}&#8457;</span>\n            </li>\n            <li>\n              {/* Relative humidity (%) */}\n              <strong className='label'>Relative Humidity:</strong>\n              <span>{conditions.relativeHumidity}&#37;</span>\n            </li>\n            <li>\n              {/* Summary of cloud coverage (text string) */}\n              <strong className='label'>Cloud Coverage</strong>\n              <span>{conditions.cloudLayers.map(item => item.coverage.toUpperCase())}</span>\n            </li>\n            <li>\n              {/* Visibility (Statute Miles) */}\n              <strong className='label'>Visibility:</strong>\n              <span>{conditions.visibility.distanceSm} miles</span>\n            </li>\n            <li>\n              {/* Wind Speed (MPH) */}\n              <strong className='label'>Wind Speed:</strong>\n              <span>{(conditions.wind.speedKts * 1.151).toFixed(1)} mph</span>\n            </li>\n            <li>\n              {/* Wind Direction (cardinal directions to secondary-intercardinal precision) */}\n              <strong className='label'>Wind Direction:</strong>\n              <span>{direction}</span>\n            </li>\n          </ul>\n        </div>\n      </section>\n    </section>\n  )\n}\n\nexport default Weather;"]},"metadata":{},"sourceType":"module"}